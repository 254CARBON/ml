[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "254carbon-ml"
version = "0.1.0"
description = "254Carbon ML Platform - Machine Learning, Embeddings, Vector Search, and Model Operationalization"
authors = [
    {name = "254Carbon Team", email = "dev@254carbon.com"}
]
readme = "README.md"
license = {text = "Proprietary"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "mlflow>=2.8.1",
    "scikit-learn>=1.3.2",
    "numpy>=1.24.3",
    "pandas>=2.1.4",
    "torch>=2.1.1",
    "transformers>=4.36.2",
    "sentence-transformers>=2.2.2",
    "psycopg2-binary>=2.9.9",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "pgvector>=0.2.4",
    "redis>=5.0.1",
    "boto3>=1.34.0",
    "minio>=7.2.0",
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",
    "celery>=5.3.4",
    "kombu>=5.3.4",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-instrumentation-redis>=0.42b0",
    "opentelemetry-exporter-prometheus>=1.12.0rc1",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "click>=8.1.7",
    "rich>=13.7.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "isort>=5.12.0",
]

[project.scripts]
ml-promote-model = "scripts.promote_model:main"
ml-reindex-all = "scripts.reindex_all:main"
ml-sync-specs = "scripts.sync_specs:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["libs*", "service-*", "scripts*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["libs", "service_mlflow", "service_model_serving", "service_embedding", "service_search", "service_indexer_worker"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mlflow.*",
    "transformers.*",
    "sentence_transformers.*",
    "pgvector.*",
    "celery.*",
    "kombu.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["libs", "service-mlflow", "service-model-serving", "service-embedding", "service-search", "service-indexer-worker"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
