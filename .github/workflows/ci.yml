name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ml-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: mlflow_password
          POSTGRES_USER: mlflow
          POSTGRES_DB: mlflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ml/requirements.txt
          pip install pytest-xdist

      - name: Initialize database
        run: |
          PGPASSWORD=mlflow_password psql -h localhost -U mlflow -d mlflow -f ml/scripts/init_db.sql

      - name: Start services
        run: |
          cd ml
          docker-compose up -d mlflow-server
          sleep 30
          docker-compose up -d model-serving embedding-service search-service
          sleep 30

      - name: Run integration tests
        env:
          ML_MLFLOW_TRACKING_URI: http://localhost:5000
          ML_VECTOR_DB_DSN: postgresql://mlflow:mlflow_password@localhost:5432/mlflow
          ML_REDIS_URL: redis://localhost:6379
          ML_EMBEDDING_SERVICE_URL: http://localhost:9006
          ML_SEARCH_SERVICE_URL: http://localhost:9007
        run: |
          cd ml
          pytest tests/integration/ -v -m integration --maxfail=3

      - name: Stop services
        if: always()
        run: |
          cd ml
          docker-compose down

  pipeline:
    needs: integration-tests
    uses: ./.github/workflows/service-ci-template.yml
    secrets: inherit
    with:
      service_slug: ml
      python_version: '3.11'
      install_command: |
        python -m pip install --upgrade pip
        pip install -r ml/requirements.txt
        pip install black flake8 mypy isort pytest-xdist pyyaml
      quality_matrix: ${{ toJson([
        {
          "name": "ml-platform",
          "source_path": ".",
          "tests_path": "tests",
          "coverage_path": "ml/coverage.xml"
        }
      ]) }}
      quality_command: |
        set -euo pipefail
        cd ml
        black --check --diff .
        isort --check-only --diff .
        flake8 . --max-line-length=88 --extend-ignore=E203,W503
        mypy libs/ service-*/app/ --ignore-missing-imports
        pytest tests/test_*.py -v --cov=libs --cov=service-* --cov-report=xml
      contract_command: |
        cd ml
        python - <<'PYCODE'
        import json
        from pathlib import Path
        from openapi_spec_validator import validate_spec

        specs = json.loads(Path('specs.lock.json').read_text())
        for contract_name, contract in specs.get('contracts', {}).items():
            schema = contract.get('schema')
            if not schema:
                raise RuntimeError(f"Contract {contract_name} missing schema")
            print(f"Validating {contract_name} ...", flush=True)
            validate_spec(schema)
        PYCODE
        python - <<'PYCODE'
        import os
        import yaml
        required = {'service_name', 'domain', 'runtime', 'maturity', 'owner'}

        for root, _, files in os.walk('.'):
            for name in files:
                if name == 'service-manifest.yaml':
                    path = os.path.join(root, name)
                    with open(path, 'r', encoding='utf-8') as handle:
                        manifest = yaml.safe_load(handle)
                    missing = required - set(manifest or {})
                    if missing:
                        raise RuntimeError(f"{path} missing fields: {', '.join(sorted(missing))}")
                    print(f"âœ“ {path} valid")
        PYCODE
      build_matrix: ${{ toJson([
        {
          "name": "mlflow",
          "context": "ml",
          "dockerfile": "ml/service-mlflow/Dockerfile",
          "image": "ghcr.io/254carbon/ml-platform-mlflow"
        },
        {
          "name": "model-serving",
          "context": "ml",
          "dockerfile": "ml/service-model-serving/Dockerfile",
          "image": "ghcr.io/254carbon/ml-platform-model-serving"
        },
        {
          "name": "embedding",
          "context": "ml",
          "dockerfile": "ml/service-embedding/Dockerfile",
          "image": "ghcr.io/254carbon/ml-platform-embedding"
        },
        {
          "name": "search",
          "context": "ml",
          "dockerfile": "ml/service-search/Dockerfile",
          "image": "ghcr.io/254carbon/ml-platform-search"
        },
        {
          "name": "indexer-worker",
          "context": "ml",
          "dockerfile": "ml/service-indexer-worker/Dockerfile",
          "image": "ghcr.io/254carbon/ml-platform-indexer-worker"
        }
      ]) }}
      policy_paths: |
        ml/k8s/base
        ml/k8s/production
      publish: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
      generate_sbom: true
      sign_images: true
      run_vulnerability_scan: true
