name: Release Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: 254carbon/ml-platform

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          echo "## Changes" > RELEASE_CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_CHANGELOG.md
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ML Platform v${{ steps.version.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          draft: false
          prerelease: false

  build-and-push-release:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [mlflow, model-serving, embedding, search, indexer-worker]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: ./service-${{ matrix.service }}/
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.create-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
          labels: |
            org.opencontainers.image.title=254Carbon ML Platform - ${{ matrix.service }}
            org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push-release]
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying ML Platform v${{ needs.create-release.outputs.version }} to production..."
          # This would deploy to production Kubernetes cluster
          # kubectl apply -f k8s/production/
          # kubectl set image deployment/model-serving model-serving=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-model-serving:${{ needs.create-release.outputs.version }}
          
      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Health checks on production deployment
          
      - name: Update deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: "ML Platform v${{ needs.create-release.outputs.version }} deployment: ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  generate-sbom:
    runs-on: ubuntu-latest
    needs: build-and-push-release
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./
          format: spdx-json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: ./*.spdx.json
